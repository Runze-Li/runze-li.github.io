<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RunzeLi&#39;s Blog</title>
  
  <subtitle>Runze_Li</subtitle>
  <link href="https://runze-li.github.io/atom.xml" rel="self"/>
  
  <link href="https://runze-li.github.io/"/>
  <updated>2020-10-13T13:11:47.876Z</updated>
  <id>https://runze-li.github.io/</id>
  
  <author>
    <name>Runze_Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://runze-li.github.io/2020/10/13/greedy-algorithm/"/>
    <id>https://runze-li.github.io/2020/10/13/greedy-algorithm/</id>
    <published>2020-10-13T13:30:07.000Z</published>
    <updated>2020-10-13T13:11:47.876Z</updated>
    
    <content type="html"><![CDATA[<p>本文我们来聊一聊贪心算法，首先我们先了解一下，什么是贪心算法。<br>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。贪心算法是一种对某些求最优解问题的更简单、更迅速的设计技术。贪心算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，省去了为找最优解要穷尽所有可能而必须耗费的大量时间。贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择，就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解。虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪心算法不要回溯。<br>贪心算法一般按如下步骤进行：</p><ol><li>建立数学模型来描述问题。</li><li>把求解的问题分成若干个子问题。</li><li>对每个子问题求解，得到子问题的局部最优解。</li><li>把子问题的解局部最优解合成原来解问题的一个解。 </li></ol><p>下面我们通过一些例子来实践一下：<br>第一题：找零问题<br>假设付款找零有100、50、20、10、5、1元面值零钱，问请设计一种方案使得找的钞票数最少。<br>这个问题就是最简单的贪心问题，我们只需要从最大的开始找就好，先从100的开始，然后用50的，以此类推，那么最终钞票总数就是最少的，代码实现如下：</p><pre><code># 找零问题t = [100, 50, 20, 10, 5, 1]   def change(t, n):      m = [0 for _ in range(len(t))]      for i, money in enumerate(t):          m[i] = n // money          n = n % money      return m, n</code></pre><p>第二题：背包问题<br>背包问题可分为两类，一种是0-1背包，一种是分数背包。0-1背包是指，在取物品时我们必须要么一次性全部拿走该商品，要么不拿。分数背包是指，我们可以选择只拿取某件商品的一部分。首先我们来看一下分数背包，假设我们有一个小背包，可装50g东西，那么这个时候在面前摆好了三种砂，分别是金砂，银砂和铜砂，金砂值60块，共计10g，银砂值100块，共计20g，铜砂值120块，共计30g，问能带走的最大价值是多少。<br>这个问题就可以利用贪心算法，带走性价比最高的就好了，这个时候我们需要先计算一下每一件物品的性价比，那么可以看出金子6块/g，银子5块/g，铜4块/g，那么我们只需要从金子开始，最大程度的带，若背包剩余则带银子，最后铜，代码实现如下：</p><pre><code>goods = [(60, 10), (100, 20), (120, 30)]  # 价格+重量  goods.sort(key=lambda x: x[0] / x[1], reverse=True)  # 对性价比进行排序def fractional_backpack(goods, w):      m = [0 for _ in range(len(goods))]      for i, (prize, weight) in enumerate(goods):          if w &gt;= weight:              m[i] = 1              w = w - weight          else:              m[i] = w / weight              w = 0    break   return m  print(fractional_backpack(goods, 50))</code></pre><p>那么我们想一下，0-1 背包是否也能按照这个方法实现呢？显然是不能的，举一个例子，假设我们背包还是50g，这次是金块银块铜块，假设金块60g值300，银块30g值150，铜块50g值200，按照贪心算法，就会把银块拿走，而实际上，拿铜块才是最优解，那么0-1背包如何解决呢？我们下文再讲。</p><p>第三题：数字拼接问题<br>假设有一堆数字，想要将其拼成有一个数字，且这个数字最大，问该如何实现，假设我们有32, 94, 128, 1286, 6, 71这些数字。拿到这个问题，我们的思路一定是比较首位，是不是因为9最大，所以94要放在最前面。那么我们也要考虑一个问题，比如说128 和 1286，前面都是128，那么应该谁在前谁在后呢？我们先来看一下，这两个数拼接后有两种情况，1281286和1286128，很明显是后者大，那么再举一个例子，828和8286，拼接后的两种情况分别是8288286和8286828，很明显是前者大了，那么这种数据我们无法找到其规律，那么怎么办，我们可以直接通过字符串的方式，进行比较，然后只需要比较每次排列好的字符串进行比较就好，例如说比较a + b 和 b + a一样，我们直接通过结果来比较，那么是不是可以考虑一种冒泡排序的思想呢？我们把哪些排序后小的放在下面，大的放在上面即可。代码很简单，大家可以通过代码看出这个思路：</p><pre><code>lis = [32, 94, 128, 1286, 6, 71]  def number_join(lis):      lis = list(map(str, lis))      for i in range(len(lis)):          for j in range(i, len(lis)):              if lis[i] + lis[j] &lt; lis[j] + lis[i]:                  lis[i], lis[j] = lis[j], lis[i]      return &quot;&quot;.join(lis)  print(number_join(lis))</code></pre><p>问题四：活动选择问题<br>假设有n个活动，但他们共用一个场地且每次只允许其中一个活动，每个活动都有一个开始时间和一个结束时间，问安排哪些活动能使得举办个数最多。<br>**<img src="/2020/10/13/greedy-algorithm/1.jpg" class title="图1">**<br>那么针对这个问题，我们首先要了解一个事情，活动时间结束最早的，一定在最优解中，这个是可以证明的，这里我们使用反正法，假设a是最早结束的活动，b表示最优解中的元素，当a = b时结论成立，反之，假设a不在b中，那么我们以上图为例，假设i2 是最优解中元素，i1不是最优解中元素。可是我们可以观察到如果用i1替换i2是不是也不会影响其他解，那么i1是不是也可以是最优解中的一个，这就矛盾了，因此可以证明，最早结束的一定是最优解。那么知道了这点后，我们是不是就可以把这个最优解放于首位，其他的只需要根据结束时间排好序，然后比较第i个元素是否与我当前结束的这个活动有冲突，冲突则舍弃，不冲突则它是下一个活动，代码如下：</p><pre><code>activities = [(1, 4), (3, 5), (0, 6), (5, 7), (3, 9), (5, 9), (6, 10), (8, 11), (8, 12), (2, 14), (12, 16)]  activities.sort(key=lambda x: x[1])  # 根据结束时间进行排序def activities_selection(acti):      res = [acti[0]]      for i in range(1, len(acti)):          if acti[i][0] &gt;= res[-1][1]:  # 当前活动开始时间小于等于最后一个入选活动的结束时间             # 不冲突             res.append(a[i])      return res  print(activities_selection(activities))</code></pre><p>以上就是贪心的基本思想及部分例题，如果大家有哪些不会的可以联系我。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文我们来聊一聊贪心算法，首先我们先了解一下，什么是贪心算法。&lt;br&gt;贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解。贪心算法是一种对某些求最优解问题的更简单、更迅速的设计</summary>
      
    
    
    
    <category term="算法" scheme="https://runze-li.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="https://runze-li.github.io/2020/10/09/Binary-Tree/"/>
    <id>https://runze-li.github.io/2020/10/09/Binary-Tree/</id>
    <published>2020-10-09T07:30:07.000Z</published>
    <updated>2020-10-09T13:46:35.788Z</updated>
    
    <content type="html"><![CDATA[<p>本期我们聊一聊二叉树的遍历。<br>在讲堆排序的时候，已经为大家讲解了树的基本知识，不了解的同学可以去看一下堆排序的文章，在这里就不再赘述了。那么首先先画一棵简单的二叉树：<br>**<img src="/2020/10/09/Binary-Tree/1.jpg" class title="图1">**<br>然后我们用代码实现这棵二叉树：</p><pre><code>class BitreeNode:      def __init__(self, data):          self.data = data          self.lchild = None          self.rchild = None  a = BitreeNode(&quot;A&quot;)  b = BitreeNode(&quot;B&quot;)  c = BitreeNode(&quot;C&quot;)  d = BitreeNode(&quot;D&quot;)  e = BitreeNode(&quot;E&quot;)  f = BitreeNode(&quot;F&quot;)  g = BitreeNode(&quot;G&quot;)  e.lchild = a  e.rchild = g  a.rchild = c  c.lchild = b  c.rchild = d  g.rchild = f</code></pre><p>那么，首先先给大家三种遍历的结果，大家根据遍历的结果，看看是否能推断出是如何进行遍历的。<br>前序遍历：E A C B D G F<br>中序遍历：A B C D E G F<br>后序遍历：B D C A F G E<br>其实大家根据结果与遍历名称其实也可以大致推断出遍历方式，我们假设有一个列表存取每次的结果，首先我们先来看前序遍历：所谓前序遍历，就是从根节点处开始，先找左子节点后找右子节点并不断递归的过程，以本文样例为例，从E开始，E进列表，找到左子节点A，A进列表，然后找A的左子节点发现没有，然后找A的右子节点C，C进列表，然后找C的左子节点B，找B的左子节点发现没有，找B的右子节点也没有，返回C，找到C的右子节点D，D进列表，D同B一样没有左右子节点，返回C，C均找过返回A，A返回E，找E的右子节点G，G进列表，找G左子节点没有找右子节点F，F进列表，找F没有左右子节点返回G，G返回E 结束。<br>整个过程的图示为：<br>**<img src="/2020/10/09/Binary-Tree/2.jpg" class title="图2">**<br>从图示中我们可以看到，先将根节点放在队首，然后向后的两个空间存放左右两个新子树，然后新的子树再将根节点放在第一位，以此类推。我们来看一下代码实现：</p><pre><code>def prev_order(root):      if root:          print(root.data, end=&quot; &quot;)          prev_order(root.lchild)          prev_order(root.rchild)</code></pre><p>接下来是中序遍历，所谓中序遍历，就是先遍历左子树再遍历根节点最后遍历右子树，以图为例，先遍历E的左子树（A C B D），然后找到根节点 A 遍历其左右子树，没有左子树，返回A，A进列表，遍历右子树（C B D），找到其根节点C遍历左子树B，B没有左子树，返回B，B进列表，B也没有右子树，返回C，C进列表，遍历C的右子树D，D没有左子树，返回D，D进列表，也没有右子树，证明左子树遍历结束，返回E，E进列表，然后遍历E的右子树，方法同上，先返回G，再返回F。<br>整个过程的图示为：<br>**<img src="/2020/10/09/Binary-Tree/3.jpg" class title="图3">**<br>由图示我们可以看到，先将根节点放于中间，左右两边各开辟一个空间分别存放左右子树，然后左子树内将新根节点放于中间，左右各开辟新空间存放新的左右子树，右子树同理。代码实现如下：</p><pre><code>def mid_order(root):      if root:          mid_order(root.lchild)          print(root.data, end=&quot; &quot;)          mid_order(root.rchild)</code></pre><p>最后是后序遍历，所谓后续遍历，大家已经可以根据刚刚两个所讲的遍历方式推断出是如何遍历的了，就是先遍历左子树，再遍历右子树，最后回到根节点，以图为例，我们已知E是根节点，先观察左子树（A C B D），然后找到新根节点A，找其左子树发现没有，然后找其右子树（C B D），然后找到新根节点C，找其左子树B，发现没有左右子树后，返回B，B进列表，然后找C的右子树D，没有左右子树，返回D，D进列表，返回C，C进列表，然后返回A，A进列表，以A为根节点的左子树遍历完成，用同样的方法遍历E的右子树（G F），最后返回E。<br>整个过程图示为：<br>**<img src="/2020/10/09/Binary-Tree/4.jpg" class title="图4">**<br>由图示我们可以看到，先将根节点放于尾部，然后前面开辟一前一后两个空间分别存放左子树右子树，然后方法同样，递归实现：</p><pre><code>def post_order(root):      if root:          post_order(root.lchild)          post_order(root.rchild)          print(root.data, end=&quot; &quot;)</code></pre><p>最后，跟大家聊一聊根据遍历结果复原树的方法，这个时候，我们需要以下两种条件：</p><ol><li>前序遍历 + 中序遍历</li><li>中序遍历 + 后序遍历</li></ol><p>注意，这两个条件中我们都看到了中序遍历，中序充当了胶水的重要角色，那么如何实现呢，给大家模拟一下，<br>首先，我们观察到前序遍历的第一个字母E，证明整个树的根节点是E，然后我们观察中序遍历，找到E，那么E的两端就分别是其左子树（A B C D）和右子树（G F）了。这个时候，我们就可以把E画在纸上了，然后看前序遍历，找到左子树的四个元素，A是第一个，证明A是此左子树的根节点，然后再回到中序遍历找这个左子树，发现A左面是没有元素的，证明A是没有左子树的，同时A的右子树就是（B C D），然后再先到前序遍历中找到C，然后回到中序遍历中找到C的左右两端，以此类推，我们是不是就能画出E的左子树：<br>**<img src="/2020/10/09/Binary-Tree/5.jpg" class title="图5">**<br>那么按照同样的方式，是不是就可以也可以画出E的右子树。<br>那么中序遍历 + 后续遍历的寻找方式是不是也是一样的呢？大家自己做一做，有不会的地方，欢迎在评论区里留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本期我们聊一聊二叉树的遍历。&lt;br&gt;在讲堆排序的时候，已经为大家讲解了树的基本知识，不了解的同学可以去看一下堆排序的文章，在这里就不再赘述了。那么首先先画一棵简单的二叉树：&lt;br&gt;**&lt;img src=&quot;/2020/10/09/Binary-Tree/1.jpg&quot; clas</summary>
      
    
    
    
    <category term="数据结构" scheme="https://runze-li.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://runze-li.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Python 链表</title>
    <link href="https://runze-li.github.io/2020/10/08/linklist/"/>
    <id>https://runze-li.github.io/2020/10/08/linklist/</id>
    <published>2020-10-08T07:30:07.000Z</published>
    <updated>2020-10-09T07:16:49.145Z</updated>
    
    <content type="html"><![CDATA[<p>在本文中我们来简单聊一聊Python的链表。<br>首先我们要先了解一下什么是链表，它于数组（列表）有什么区别。链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。<br>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的存取往往要在不同的排列顺序中转换。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。<br>首先说一说单链表：<br>**<img src="/2020/10/08/linklist/1.jpg" class title="图1">**<br>上图是一个单链表，那么在Python中我们应该如何实现这个单链表呢？在数据的插入过程中，我们有两种插入方式，头插法和尾插法，顾名思义，就是在头部插入元素和尾部插入元素。<br>头插法的特点就是，把新元素的next指向头节点，再把头节点赋值为新元素：</p><pre><code>class Node:      def __init__(self, item):          self.item = item          self.next = None  def creat_linklist_head(li):  # 头插法      head = Node(li[0])      for element in li[1:]:          node = Node(element)          node.next = head          head = node      return head</code></pre><p>尾插法则不同，当只有一个元素时，head指针和tail指针同时指第一个元素。当新元素插入时，将尾指针指向该元素，再将尾指针赋值为新元素值。</p><pre><code>def creat_linklist_tail(li):  # 尾插法      head = Node(li[0])      tail = head      for element in li[1:]:          node = Node(element)          tail.next = node          tail = node      return head</code></pre><p>来看一看单链表的插入和删除。<br>**<img src="/2020/10/08/linklist/2.jpg" class title="图2">**<br>我们假设p是待办元素，它的上一个元素是curnode。在插入时我们要注意，先执行  p.next = curnode.next，以图为例，有的看官回想，为什么不先把p和a连上，因为我们会发现，在连接p和a的时候，a于c断开，没有人和c相连，那么c就会无法被寻找，换句话说，这个元素就游荡在茫茫数据之中。因此，再已知只有curnode和p的前提下，要先连接x和后面的元素，然后再执行 curnode.next = p。<br>**<img src="/2020/10/08/linklist/3.jpg" class title="图3">**<br>那么在删除时呢，我们可以仿照插入时，将p后的元素连接到curnode后面，然后删除p即可。那么我们总结一下单链表插入删除方式如下：</p><pre><code> # 插入元素 p.next = curnode.next curnode.next = p # 删除元素 curnode.next = p.next del p</code></pre><p>再来看一看双链表，从单链表我们可以看到一个弊端，那就是我们无法向前寻找元素，那么双链表就很好的解决了这一问题。<br>**<img src="/2020/10/08/linklist/4.jpg" class title="图4">**<br>如上图所示，双链表还有个头指针指向上一元素，那么双链表的插入和删除又该如何实现呢？<br>首先是插入元素：<br>**<img src="/2020/10/08/linklist/5.jpg" class title="图5">**<br>由上图，当一个新元素p到来时，我们需要执行这四个操作</p><pre><code>p.next = curnode.nextcurnode.next.prev = pp.prev = curnodecurnode.next = p</code></pre><p>然后是删除元素：<br>**<img src="/2020/10/08/linklist/6.jpg" class title="图6">**<br>由上图，当我们想删除元素p时，我们需执行如下操作：</p><pre><code>curnode.next = p.nextp.next.prev = curnodedel p</code></pre><p>这就是数据结构—-链表的大致原理，各位看官有什么不懂的欢迎在评论区留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在本文中我们来简单聊一聊Python的链表。&lt;br&gt;首先我们要先了解一下什么是链表，它于数组（列表）有什么区别。链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在</summary>
      
    
    
    
    <category term="数据结构" scheme="https://runze-li.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://runze-li.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>迷宫问题2--浅谈广度优先搜索</title>
    <link href="https://runze-li.github.io/2020/10/07/maze-problem-queue/"/>
    <id>https://runze-li.github.io/2020/10/07/maze-problem-queue/</id>
    <published>2020-10-07T07:30:07.000Z</published>
    <updated>2020-10-08T13:21:24.632Z</updated>
    
    <content type="html"><![CDATA[<p>上期文章中，我们通过迷宫问题引入了深度优先搜索，采用了一种利用栈的思想，在本文中，将为大家引入广度优先搜索的思想，利用了一种队列的方式。首先，什么是广度优先搜索？广度优先搜索算法（Breadth-First Search，BFS）是一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。BFS并不使用经验法则算法。<br>那么，广搜与深搜的区别是什么呢？其实很容易区分，深搜可以理解为按照顺序来搜索，譬如说我能走上就绝不走下了，直到没路了再回溯回来尝试向下走，而广搜不同，广搜同时走很多路径，只要能走，就全都一起走，直到有一个点到了终点就终止搜索，接下来，给大家模拟一下使用广度优先搜索的过程，就一目了然了。<br>我们依旧以之前的图说明，先声明一下，图中的数字是走的第几次，也就是到第几步，箭头是说明该点是哪个节点的下一节点，说白了就是两个点之间的引出关系，方便大家的理解。<br>**<img src="/2020/10/07/maze-problem-queue/1.jpg" class title="图1">**<br>由图我们可以看出，一个节点可以同时引出不止一个节点，直到最终有点触碰到了终点，则停止继续搜索，其实可以看出，广搜搜索到的路径一定是最短路径。<br>接下来给大家聊一下广搜路径的输出方式，在上文中我们已经了解到，每一个节点都是被其上一节点所引出，找到终点后，其实我们需要对路径进行回推。因此，每一个节点，我们都需要有一个下标作为其地址，方便最后的反向找路。那么就会有人提出问题，如何获得下标，规则是什么？我们假定一个列表（path），用于存取这些坐标，那么我们可以考虑以元组形式进行存储即（横坐标，纵坐标，下标），那么当第一个元素进队后，将其出队存储于我们新创建的path列表中，然后寻找下一个节点，那么下标如何定义，我们举一个简单的例子：<br>**<img src="/2020/10/07/maze-problem-queue/2.jpg" class title="图2">**<br>如上图，我们想从 1 走到 7。<br>首先是1 进队列，然后存入path列表中，由于它是首元素，我们给它个下标 -1，我们观察到下一次进队的可以有2和3，那么2和3的下标该怎么给，可以采取这个规则，看是谁让它来的，比如说2和3，是1让他俩来的，那么给他俩的下标就都是 1 的位置 0 ，再往下看，4和5都是由2引进来的，那么他俩的下标就是2这个元素的位置 1，接下来就是7由5引进，7下标是5的位置，以此类推。<br>那么我按照广搜加下标是不是可列出下面的表格：<br>**<img src="/2020/10/07/maze-problem-queue/3.jpg" class title="图3">**<br>接下来，我们就可以按这个表格，从7往回找，7按下标找到5，5找到2，2找到1，发现1的下标是-1 则终止。<br>那么如何思路有了，如何进行代码实现呢？首先我们可以调用队列的类库：</p><pre><code>from collections import deque</code></pre><p>然后我们依然用上次的迷宫以及四种移动方式：</p><pre><code>maze = [    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],    [1, 0, 0, 0, 1, 0, 1, 0, 0, 1],    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  ]  dircs = [      lambda x, y: (x + 1, y),      lambda x, y: (x - 1, y),      lambda x, y: (x, y + 1),      lambda x, y: (x, y - 1),  ]</code></pre><p>接下来就是主题代码了，首先我们先模拟出输出函数：</p><pre><code>def print_path(path):      headnode = path[-1]  # 首先找到存的最后一个位置    real_path = []       # 定义一个新列表存放坐标    while headnode[2] != -1:  # 只要下标不为 -1        real_path.append(headnode[0:2])  # 将该坐标放入新列表        headnode = path[headnode[2]]       # 新判断位置    real_path.append(headnode[0:2])       # 将起点放入    real_path.reverse()                   # 倒叙输出    for node in real_path:          print(node)</code></pre><p>最后就是广搜的部分了：</p><pre><code>def maze_path_queue(x1, y1, x2, y2):      queue = deque()          # 定义一个队列    maze[x1][y1] = 2          # 标记起点走过    queue.append((x1, y1, -1))      # 将起点放入队首    path = []                          # 定义路径列表    while len(queue) &gt; 0:              # 只要队列不为空        headnode = queue.popleft()  # 队首出列        path.append(headnode)          # 将队首放入路径内        if headnode[0] == x2 and headnode[1] == y2:    # 如果发现此时队首是终点则输出              print_path(path)              return True          for dir in dircs:              # 执行移动方法            nextnode = dir(headnode[0], headnode[1])              if maze[nextnode[0]][nextnode[1]] == 0:  # 如果下一个点是可走点                queue.append((nextnode[0], nextnode[1], len(path) - 1)) # 下一节点入队并记录下标                                                                        # 下标记录谁带它来的                maze[nextnode[0]][nextnode[1]] = 2   # 标记该点已经走过     else:          print(&quot;There is no way!&quot;)      # 如果队空，则证明没有路        return False</code></pre><p>这就是整个迷宫问题的解决方式，大家有哪些不懂的地方可发布在评论区。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上期文章中，我们通过迷宫问题引入了深度优先搜索，采用了一种利用栈的思想，在本文中，将为大家引入广度优先搜索的思想，利用了一种队列的方式。首先，什么是广度优先搜索？广度优先搜索算法（Breadth-First Search，BFS）是一种盲目搜寻法，目的是系统地展开并检查图中</summary>
      
    
    
    
    <category term="搜索" scheme="https://runze-li.github.io/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://runze-li.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>迷宫问题--浅谈深度优先搜索</title>
    <link href="https://runze-li.github.io/2020/10/06/maze-problem/"/>
    <id>https://runze-li.github.io/2020/10/06/maze-problem/</id>
    <published>2020-10-06T13:30:07.000Z</published>
    <updated>2020-10-07T07:04:40.029Z</updated>
    
    <content type="html"><![CDATA[<p>在数据结构中，我们先学习的是栈和队列，在本文中，我们来简单聊一聊栈。栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。<br>**<img src="/2020/10/06/maze-problem/1.jpg" class title="图1">**<br>由上图我们可以看出，栈的底部是封死的，因此栈的特点就是先进后出，后进先出。<br>现在我们来看一道迷宫问题,现在想从上边的红块走到下面的红块，期间，我们需要避开所有的蓝块，且只可以选择 上、下、左、右四个方向来移动，最终请输出每次移动的坐标，若不存在这条道路，就输出没有该路径。<br>**<img src="/2020/10/06/maze-problem/2.jpg" class title="图2">**<br>可见上图，为本次的迷宫示意图，为方便大家代码实现，现给出该迷宫的数字表达形式：</p><pre><code>maze = [    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],    [1, 0, 0, 1, 0, 0, 0, 1, 0, 1],    [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],    [1, 0, 0, 0, 1, 0, 1, 0, 0, 1],    [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],    [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],    [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  ]</code></pre><p>其中，1 代表不可走的蓝块，0 为可走的白块，（1，1）为起始点，（8，8）为终止点。<br>那么这道题该如何解决呢？<br>首先给大家引入一下深度优先搜索的思想：深度优先搜索属于图算法的一种，是一个针对图和树的遍历算法，英文缩写为DFS即Depth First Search。那么以本题为例，先为大家模拟一下深度优先搜索的过程，以帮助以后更好的理解深度优先搜索。我们首先为这个迷宫设定好坐标：<br>**<img src="/2020/10/06/maze-problem/3.jpg" class title="图3">**<br>由上图，我们已经坐标化整个迷宫，现在已知我们只有上、下、左、右这四种移动方式，假定我们按照上下左右的顺序选择了一种方式且可以移动（即下一个块不是蓝块）就不执行其他移动方式（即如果发现上可走，就不要考虑其他移动方式了，上不行就换右）。同时，走过的块我们要将其标记为蓝块，或是其他颜色的块，以区分未走过的白块。现在请根据我以下所写的坐标来看每一步所走的路径：<br>（1，1）-&gt;（2，1）-&gt;（2，2）-&gt;（2，3）-&gt;（3，3）-&gt;（4，3）-&gt;（4，2）-&gt;（4，1）-&gt;（5，1）<br>-&gt;（6，1）-&gt;（6，2）-&gt;（5，2）-&gt;（4，2）。<br>注意，在这个时候我们会发现（4，2）这个点我们之前走过了，那么这个时候，这个点我们就不能再走了，也说明了，这条路径就是不通的，那么怎么办，我们返回上一个点（6，2），去观察他还有没有路能走，只要下一步不是白块，就可以走，因此，我们以此类推，最终退到（2，3）这个点继续模拟：<br>（2，3）-&gt;（1，3）-&gt;（1，2）发现五路可走，那么回退至（1，3）发现可向下走，于是（1，4）-&gt;（1，5）以此类推，直到最终观察能否到达（8，8）。<br>这既是整个过程的一个思路，也是深搜的基本思想，大家可以从整个过程中看出，是不是这个方式运用的是栈的原理，我们永远取的是栈的栈顶元素进行查找，可以就留在栈内，不可以就出栈，查看新一个栈顶元素，下面我们来代码实现一下：<br>首先我们先定义四个移动方式，这里可以使用lambda表达式： </p><pre><code>dircs = [   lambda x, y: (x + 1, y),   lambda x, y: (x - 1, y),   lambda x, y: (x, y + 1),   lambda x, y: (x, y - 1),  ]</code></pre><p>接下来就是搜索的过程：</p><pre><code>def maze_path(x1, y1, x2, y2):      stack = []      stack.append((x1, y1))   # 列表中传入的是坐标    while (len(stack) &gt; 0):  # 只要栈不为空        topnode = stack[-1]  # 当前的栈顶元素          if topnode[0] == x2 and topnode[1] == y2:  # 当检测到该点就是终点时输出栈内所有元组            for i in stack:                  print(i)              return True          for dir in dircs:    # 从四种方向中选取走向              nextnode = dir(topnode[0], topnode[1])   # 查找下一个点的坐标            if maze[nextnode[0]][nextnode[1]] == 0:  # 如果该点是白块                stack.append(nextnode)               # 这个点入栈                maze[nextnode[0]][nextnode[1]] = 2   # 将该点赋值为2 证明该点已经走过              break          else:              stack.pop()                               # 如果没有下一个点，则进行出栈操作    else:          print(&quot;There is no way!&quot;)                    #栈空则证明没有路        return False</code></pre><p>这就是一个简单的深搜过程，其实在这个过程中我们只需要注意，走过的点一定要进行标记即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在数据结构中，我们先学习的是栈和队列，在本文中，我们来简单聊一聊栈。栈（stack）又名堆栈，它是一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上</summary>
      
    
    
    
    <category term="搜索" scheme="https://runze-li.github.io/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://runze-li.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 队列</title>
    <link href="https://runze-li.github.io/2020/10/06/queue/"/>
    <id>https://runze-li.github.io/2020/10/06/queue/</id>
    <published>2020-10-06T13:30:07.000Z</published>
    <updated>2020-10-08T11:08:53.004Z</updated>
    
    <content type="html"><![CDATA[<p>本文将简单阐述一下Python数据结构中队列的原理即实现方式。<br>首先我们来看一下，什么是队列：<br>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。队列是一种先进先出（First in First Out）的线性表，简称FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。假设队列是q=（a1,a2,…,an），那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，列在最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然在队伍的最后。<br>**<img src="/2020/10/06/queue/1.jpg" class title="图1">**<br>如上图所示，队列是一种先进先出的线性表，我们用 front 表示队首，rear 表示队尾，但是在实际的运用过程中，往往会出现一种“假溢出”现象。<br>那么什么是假溢出现象呢？可以理解为系统作为队列用的存储区还没有满,但队列却发生了溢出,我们把这种现象称为”假溢出”。<br>**<img src="/2020/10/06/queue/2.jpg" class title="图2">**<br>如上图所示，在队列我的front指针指向的是第一个元素对应的位置，rear指针指向的是最后一个元素所对应的下一个元素位置。<br>**<img src="/2020/10/06/queue/3.jpg" class title="图3">**<br>如上图所示，当我一出了a1，a2后，front指针也同时移动到了a3的位置，可是，由于队列只有五个元素的长度，当a5进队列后，rear指针无处可指，同时，我们还发现，队列中还存在着两个位置的空位，这就是这个队列的假溢出现象，那么为了解决这一问题，人们想到了一个新的存储方式—-循环队列。所谓循环队列，就是将向量空间想象为一个首尾相接的圆环，并称这种向量为循环向量。存储在其中的队列称为循环队列（Circular Queue）。循环队列是把顺序队列首尾相连，把存储队列元素的表从逻辑上看成一个环，成为循环队列。<br>**<img src="/2020/10/06/queue/4.jpg" class title="图4">**<br>如上图所示，就是一个循环队列的基本流程，但是，大家一定也发现了一个问题，为什么我们没有办法判断是否是队满还是队空呢？其实可以根据我们最原始的队列来看，如果front和rear指针相遇在一起，则证明这该队列是空队列，在循环队列中，当最后一个空间存入后，rear后移很容易与front指针再次相遇，因此，我们采取了牺牲一个存储空间的方式，来判断队满和队空。因此哦我们可以得到以下两个计算公式：<br>队列满的条件是：</p><pre><code>(rear+1)%QueueSize == front</code></pre><p>通用的计算队列长度的公式为：</p><pre><code>(rear - front+ QueueSize)%QueueSize</code></pre><p>那么我们要如何实现队列呢，当然可以使用列表，但是本文采用类的方式为大家实现一下队列的原理：</p><pre><code>class Queue:      def __init__(self,size = 100):  # 对队列进行初始化操作        self.queue = [0 for i in range(size)]          self.size = size                      self.rear = 0                  # 设定头指针和尾指针都为0号元素，此时队空        self.front = 0       def push(self, element):          # 定义入队操作        if not self.is_filled():      # 如果队不满            self.rear = (self.rear + 1) % self.size # 队尾指针应指向最后元素的下一地址              self.queue[self.rear] = element          # 将该元素放入队列        else:              raise IndexError(&quot;Queue is filled.&quot;)      # 反之则证明队满，告诉用户不要进了    def pop(self):          if not self.is_empty():      # 如果队不空            self.front = (self.front + 1) % self.size    # 队首指针指向下一元素              return self.queue[self.front]                # 返回队首元素          else:                                                       raise IndexError(&quot;Queue is empty.&quot;)        # 反之证明队空，则无元素可出    def is_empty(self):              # 定义队空，是两指针相等时        return self.rear == self.front      def is_filled(self):              #定义队满，按照上文公式        return (self.rear + 1) % self.size == self.front</code></pre><p>这就是整手写的队列过程。其实，在Python中并不需要这么麻烦，众所周知，Python是一门集百家所长的语言，我们可以import一个对自己有用的类库，譬如说 deque 这个类库。<br>首先进行一波引用：</p><pre><code>from collections import deque</code></pre><p>   该类库的特点就是已经帮我们写好了队列的这个类以及其中的成员函数，其中我们主要会用到如下这四个函数：</p><pre><code>   deque.append()        # 右侧进队   deque.pop()            # 右侧出队   deque.popleft()        # 左侧出队   deque.appendleft()    # 左侧进队</code></pre><p>  以上就是Python队列的大致原理及其特有类库，各位看官有何不懂之处，欢迎在评论区留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文将简单阐述一下Python数据结构中队列的原理即实现方式。&lt;br&gt;首先我们来看一下，什么是队列：&lt;br&gt;队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。队列是一种先进先出（First in First Out）的线性表，简称FIFO。允许插</summary>
      
    
    
    
    <category term="数据结构" scheme="https://runze-li.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="数据结构" scheme="https://runze-li.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://runze-li.github.io/2020/10/04/merge-sort/"/>
    <id>https://runze-li.github.io/2020/10/04/merge-sort/</id>
    <published>2020-10-04T06:58:21.000Z</published>
    <updated>2020-10-11T10:52:39.592Z</updated>
    
    <content type="html"><![CDATA[<p>这次要和大家聊一聊归并排序，那么什么是归并排序呢，首先给大家举一个简单的例子：<br>**<img src="/2020/10/04/merge-sort/1.jpg" class title="图1">**<br>如上图，我们得到一个列表，其实这个列表有一个规律，那就是如果我们从中间截断，左右两边的小列表其实是有序的，在学习数据结构时，我们学习过一个经典例题，合并两个有序数组，那么这个时候是不是可以像合并数组那样合并这两个有序数列。<br>**<img src="/2020/10/04/merge-sort/2.jpg" class title="图2">**<br>如上图，我们把这个列表分为两段，标记好起始元素位置（low）和终止元素位置（high）以及两地址的中间地址（mid），其实，我们已经把整个列表以mid为中心，分成两个小列表了，这个时候就可以利用归并（merge）的思想，首先我们取到两个指针，i，j，这两个指针分别指向两个小列表的第一个元素，这个时候，我们比较i位置的元素大小和j位置的元素大小，我们假设这个列表为lis,那么lis[i] &lt; lis[j]的话，是不是就可以断定，lis[i]此时的元素就是最小的元素了，反之，要是lis[j] &lt; lis[i]，那么lis[j]就是整个列表中最小的元素，这个时候我们就可以把这个最小的元素取出放于一个新列表的首位，我们假设这个新列表是ltmp，这个时候，按照我们的例子，1 就被取下放置于我们的新列表中了，同时，j指针的位置要向后移动一位。<br>**<img src="/2020/10/04/merge-sort/3.jpg" class title="图3">**<br>以此类推，比较i位置与j位置的大小关系，然后把每一次的最小值暂存到新列表（ltmp）中，不要忘记指针随着原位置数的取出而后移。<br>**<img src="/2020/10/04/merge-sort/4.jpg" class title="图4">**<br>那么什么时候终止呢？有两种情况，第一种是 i 指针大于mid位置的时候，第二种是 j 指针大于high位置的时候。终止后会也会发现两种情况，要么是左边的小列表数字有剩余，要么是右边的小列表数字有剩余，这个时候，我们知道，左右两边的列表其实是有序的，那么本身不需要再进行排列了，直接放到新列表（ltmp）的末尾就好，最后，我们只要把新列表（ltmp）再归还给原列表（lis）就完成了一次归并（merge）。代码如下：</p><pre><code>def merge(lis,low,mid,high):      i = low      j = mid + 1      ltmp = []      while i &lt;= mid and j &lt;= high:          if lis[i] &lt; lis[j]:              ltmp.append(lis[i])              i = i + 1          if lis[j] &lt; lis[i]:              ltmp.append(lis[j])              j = j + 1      while i &lt;= mid:          ltmp.append(lis[i])          i = i + 1      while j &lt;= high:          ltmp.append(lis[j])          j = j + 1      lis[low:high+1] = ltmp</code></pre><p>接下来就是整个归并排序的核心了，在实际排序过程中，我们几乎很少能遇到上文这种理想的情况，我们得到的列表大多是无序的。那么，如何能通过归并的方式得到排序的结果呢？<br>**<img src="/2020/10/04/merge-sort/5.jpg" class title="图5">**<br>答案是采取一种递归的思想，先分解再合并，我们将原列表分解为一个个的小列表，每个小列表之间进行归并（merge），然后最终小列表合并成大列表，如下图所示，即可得到一个有序列表。<br>归并排序代码如下：</p><pre><code>def merge_sort(lis,low,high):      if low &lt; high:          mid = (low + high) // 2          merge_sort(lis,low,mid)          merge_sort(lis,mid+1,high)          merge(lis,low,mid,high)      return lis</code></pre><p>是不是看起来很简单，但是理解起来有些难度，这里采用递归的思想，假如，代码的倒数第二行我们不进行归并，而是对此时的递归进行打印：</p><pre><code>def merge_sort_view(lis,low,high):      if low &lt; high:          mid = (low + high) // 2          merge_sort_view(lis,low,mid)          merge_sort_view(lis,mid+1,high)          print(lis[low:high+1])</code></pre><p>那么我们会得到如下的结果：<br>[11, 8]<br>[3, 9]<br>[11, 8, 3, 9]<br>[7, 1]<br>[2, 5]<br>[7, 1, 2, 5]<br>[11, 8, 3, 9, 7, 1, 2, 5]<br>可以看出，我们在递归过程中，只有当low和high均为 1 时会结束递归，然后当加上归并（merge）函数后，即可进行合并。<br>归并排序的时间复杂度无论什么情况都是O (nlogn)，归并排序是Python内置sort函数的底层之一，内置函数是基于归并排序和插入排序的优化算法，因此，学习Python，了解归并排序是必不可少的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次要和大家聊一聊归并排序，那么什么是归并排序呢，首先给大家举一个简单的例子：&lt;br&gt;**&lt;img src=&quot;/2020/10/04/merge-sort/1.jpg&quot; class title=&quot;图1&quot;&gt;**&lt;br&gt;如上图，我们得到一个列表，其实这个列表有一个规律，那就是如</summary>
      
    
    
    
    <category term="排序" scheme="https://runze-li.github.io/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://runze-li.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://runze-li.github.io/2020/10/03/heap-sort/"/>
    <id>https://runze-li.github.io/2020/10/03/heap-sort/</id>
    <published>2020-10-03T08:47:23.000Z</published>
    <updated>2020-10-04T08:56:57.466Z</updated>
    
    <content type="html"><![CDATA[<p>学习过堆排序后，今天我们来学习一下堆排序，在学习堆排序之前，我们首先来简单学习一下树的基本知识。<br>树是一种数据结构，它是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。虽然将其称之为树，但它是树根在上，叶子在下的结构，每棵树都具有如下特点：</p><ol><li>每个结点有零个或多个子结点</li><li>没有父结点的结点称为根结点</li><li>每一个非根结点有且只有一个父结点</li><li>除了根结点外，每个子结点可以分为多个不相交的子树</li></ol><p><strong><img src="/2020/10/03/heap-sort/1.jpg" class title="图1"></strong><br>现在我们已经大致了解了树的基本形状了，那么在树这个大类中，有着一个特殊的分类—-二叉树，二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。当集合为空时，称该二叉树为空二叉树。在二叉树中，一个元素也称作一个结点。<br>**<img src="/2020/10/03/heap-sort/2.jpg" class title="图2">**<br>在二叉树中，有一个更加特殊的分支—-完全二叉树<br>一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树。<br>**<img src="/2020/10/03/heap-sort/3.jpg" class title="图3">**<br>我们看上图的这个完全二叉树，如果我们将其位置编号如下，会不会发现如下的规律：<br>左子节点 = 2 * 父节点 + 1<br>右子节点 = 2 * 父节点 + 2<br>同理，当我们知道子节点编号是时，同样可以通过 （子节点 - 1）//  2 来得到父节点的位置。<br>现在我们已经大致了解了从树到完全二叉树的一个变换，下面我们来学习一种筛选算法（sift）<br>所谓筛选，就是将已有的二叉树进行重新排列，进而得到大根堆的一个过程。<br>**<img src="/2020/10/03/heap-sort/4.jpg" class title="图4">**<br>由上图我们可以看出，大根堆是每一个父节点都会大于子节点的值。所以，简单来说，筛选的方式就是让每一个父节点的子节点都小于它就好。那么具体筛选方式是什么样的呢，现在一起来模拟一下：<br>首先先给到一个完全二叉树：<br>**<img src="/2020/10/03/heap-sort/5.jpg" class title="图5">**<br>如上图，我们观察根节点位置是 2 ，那么按照我们的原则，父节点应比其子节点大，因此这个 2 不配在根节点位置，这个时候，我们把 2 拿出二叉树，将其位置空出。<br>**<img src="/2020/10/03/heap-sort/6.jpg" class title="图6">**<br>可以看到，现在根节点的位置是空缺的，此时，我们应找到一个数字对根节点进行补全，观察其左右两子节点，发现 9 &gt; 7 ，因此将 9 置于根节点位置，现在， 9 的位置空出，此时，我们考虑是否将 2 放进去，观察原 9 位置的两个子节点 8 与 5 ，均比 2 要大，因此不能将 2 插入，比较两子节点，可发现 8 &gt; 5 ，因此将 8 填入空缺位置，然后 8 的位置空缺，以此类推，6 补空位，最终将 2 置于原 6 的位置即可完成本次筛选 ，最终，对于每一个节点进行sift函数之后即可得到一个大根堆。<br>**<img src="/2020/10/03/heap-sort/7.jpg" class title="图7">**<br>其实现代码如下：</p><pre><code>def sift(lis,root,last):          #root为根节点 last为最后一个元素位置      i = root      j = 2 * i + 1 #j是左孩子      tmp = lis[root]               #储存堆顶      while j &lt;= last:              #确定终止循环条件         if j + 1 &lt;= last and lis[j+1] &gt; lis[j]:   #比较左右两子节点               j = j + 1           if lis[j] &gt; tmp:                lis[i] = lis[j]                i = j               #将指针指向空位置（父节点）              j = 2 * i + 1           else:                lis[i] = tmp        #如果小于，则root归位              break      else:           lis[i] = tmp             #循环结束后，root归位</code></pre><p>可以看出，无论是否完成，最终都要进行root值的归位，那么，其实我们是不是可以在代码当中直接进行简化呢？大家可以在评论区说出你的答案。<br>接下来就是实现堆排序的环节了，我们采取一种倒着取的原则。毋庸置疑，此时的最顶点的 9 是我们刚刚算法派出的最大值。 那现在直接将其取下，作为我们列表中的最大值。<br>**<img src="/2020/10/03/heap-sort/8.jpg" class title="图8">**<br>那么接下来该如何取，一定有很多人会想，那我用 8 去补位，实则不然，可以试想一下，8 补了 9 的位置接下来6 补 8，4 补6，可是就没有元素可以补4了，我们现在需要的是一颗完全二叉树。因此，我们这个时候选择最后一个元素 3 作为补位项，然后再通过一次sift算法，将 8 移至顶点，然后将 8 取走，以此类推，最终得到排序好的数列。<br>代码如下：</p><pre><code>def heap_sort(lis):      n = len(lis)      for i in range((n-2)//2,-1,-1):    #从最后一个节点的父节点开始，从右向左进行筛选        sift(lis,i,n-1)      for i in range(n-1,-1,-1):          lis[0],lis[i] = lis[i],lis[0]  #将最后一个数与第一个数进行交换，重新筛选        sift(lis,0,i - 1)</code></pre><p>最终，即可取得排序好的列表，由代码可见，堆排序的时间复杂度为O (nlgn)。<br>其实，即使堆排序和快速排序的时间复杂度都是O (nlgn)，但是在实际操作中，还是快速排序会快一些，堆排序也有它独有的优势，例如说我们要解决的TopK问题，例如说我想要找到某个数列中最大的前K个数，那么我们可以考虑以下几点，第一个是排序后切片，其时间复杂度为O (nlgn)，第二种是利用基本排序方式，例如冒泡排序，其时间复杂度为O (Kn)，如果K &lt; lgn，那么其实第二种方法是快于第一种的，那么第三种方式就是利用堆排序的逐一出数，取前K项。其时间复杂度为O (nlgK)，时间应为最低。但这种方式与堆排序不同，这需要将原二叉树变换为小根堆，在上文我们提及了大根堆，保证每一个父节点都大于其子节点，那么同理，小根堆中，所有父节点也一定小于子节点，代码如下：</p><pre><code>def sift(lis,root,last):              i = root    j = 2 * i + 1 #j是左孩子    tmp = lis[root]                 while j &lt;= last:          if j + 1 &lt;= last and lis[j+1] &lt; lis[j]:  #注意，这里的小根堆相较于大根堆改成了小于号            j = j + 1          if lis[j] &lt; tmp:                         #同理，这里也要变为小于号            lis[i] = lis[j]              i = j              j = 2 * i + 1          else:              lis[i] = tmp              break   else:          lis[i] = tmpdef topk(lis,k):                                #选择前K项的函数    heap = lis[0:k]      # 1.建堆    for i in range((k-2)//2,-1,-1):          sift(heap,i,k-1)      #2.遍历    for i in range(k,len(lis)-1):          if lis[i] &gt; heap[0]:              heap[0] = lis[i]              sift(heap,0,k-1)      #3.出数    return heap</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习过堆排序后，今天我们来学习一下堆排序，在学习堆排序之前，我们首先来简单学习一下树的基本知识。&lt;br&gt;树是一种数据结构，它是由n（n&amp;gt;=1）个有限结点组成一个具有层次关系的集合。虽然将其称之为树，但它是树根在上，叶子在下的结构，每棵树都具有如下特点：&lt;/p&gt;
&lt;ol</summary>
      
    
    
    
    <category term="排序" scheme="https://runze-li.github.io/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://runze-li.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://runze-li.github.io/2020/10/02/Quick-Sort-Partition/"/>
    <id>https://runze-li.github.io/2020/10/02/Quick-Sort-Partition/</id>
    <published>2020-10-02T12:52:17.000Z</published>
    <updated>2020-10-04T08:56:31.003Z</updated>
    
    <content type="html"><![CDATA[<p>在排序算法中，有多种排序方式，例如比较低级的：冒泡排序、选择排序、插入排序。还有相对高级一些的排序方式，比如说这次要说的快速排序。快速排序相较于三种低级排序的优势在于其时间复杂度较小O (nlogn)，其利用了递归的思想，相较于循环结构，大大缩减了其排序时间，那么，快速排序的思想及原理是什么，下面我们来模拟一下。</p><ul><li>图一</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/1.jpg" class title="图1"></strong><br>以上图为例，在介绍快速排序之前，首先想介绍一种算法，分割法（partition），这种算法实现的目的如下：</p><ul><li>图二</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/2.jpg" class title="图2"></strong><br>分割后的结果如下，可以看出，我们以首部数字作为基准，左侧的数字都比该数字要小，右侧的数字都比它要大，那么我们就可以用一种递归的思想进行排序了，例如说，基于上图，我们再对6的左右两边各进行一下partition函数，是不是就可以得到以下结果：</p><ul><li>图三</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/3.jpg" class title="图3"></strong><br>以此类推，是不是就能得到我们想要排序顺序了，但注意，在本次示例中函数的调用出现了一个问题，后续会给大家解释。<br>说了这么多，那什么是分割法（partition），它的原理思想是什么，下面我们一起看一下：<br>所谓分割法，就是取列表中的一个数，其余的数以它为基准，小于基准数的放于左侧，大于基准数的放于右侧 ，可是放置的方法是什么？下面给大家模拟一下：<br>还是以图一的列表为例，首先我们取首部数字为基准数字，如图一所示，我们取 6 作为基准数字，接下来开始进行模拟，假设我们设有两个指针分别置于左右两端（left，right）：</p><ul><li>图四</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/4.jpg" class title="图4"></strong><br>第一步，我们将首部的数字移开，那么该位置将变成一个空位置：</p><ul><li>图5</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/5.jpg" class title="图5"></strong><br>那么这个时候，left指针指向为空，我们需要从right指针处开始寻找，寻找一个比基准值小的数将它置于现在left指针所指向的空位置。right指针处的数字与基准数进行比较，若小于基准数，则将它置于left指针处，若大于，则right指针进行左移，以此类推，以本文数据为例，从最右侧的 7 进行比较，大于基准数则左移，5 小于6，则 5 填补空缺位置：</p><ul><li>图六</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/6.jpg" class title="图6"></strong><br>现在我们将五填补到了left指针所指的空缺位置，但此时我们会发现，right指针处出现了空缺，这个时候我们千万不要将基准数填补至空缺位置，而是采取和之前一样的办法，反过来，从left指针处开始，寻找比基准数要大的数来填补空缺，应从left指针处开始找，小于则left指针右移，大于则将该位置的数进行填补。由图六所示，从 5 开始，找到 8 ，然后将 8 填补到right指针所指位置，同时将left指针所指位置：</p><ul><li>图7</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/7.jpg" class title="图7"></strong><br>以此类推，left指针空缺，再从right指针开始寻找比基准数小的数填补空缺，反之，right指针处空缺，从left指针处寻找比基准数大的数填补空缺。直到left指针与right指针相遇了，那么将基准数填入此时left指针所指位置，即完成了整个分割过程。</p><ul><li>图8</li></ul><p><strong><img src="/2020/10/02/Quick-Sort-Partition/8.jpg" class title="图8"></strong><br>由此，就是我们整个分割算法的实现过程了，接下来就是代码的实现了。代码如下：</p><pre><code>  def partition(li,left,right):  #划分      tmp = li[left]               #设定tmp的值为基准值    while left &lt; right:          while left &lt; right and li[right] &gt;= tmp:              right = right - 1          li[left] = li[right]     #若判断发现小于基准数，则将其填补空缺         while left &lt; right and li[left] &lt;= tmp:              left = left + 1          li[right] = li[left]     #若判断发现大于基准数，则将其填补空缺     li[left] = tmp               #基准值归位     return left                  #返回右指针位置</code></pre><p>接下来就是最终的代码实现了，快速排序是递归的过程，上文我们讲过，在基准数左右两边分别进行partition函数即可，首先基于partition函数的返回值，我们可以确定每一次基准数的最终位置，以此为中心，开始左右两边的递归，最终得到顺序结构。</p><pre><code>    def _quick_sort(li, left, right):        if left &lt; right:                     mid = partition(li,left,right) #找到每一次的基准数位置          _quick_sort(li,left,mid - 1)   #左侧递归        _quick_sort(li,mid+1,right)    #右侧递归    def quick_sort(li):                 #简化快排函数的参数        _quick_sort(li,0,len(li) - 1)</code></pre><p>注意：</p><ul><li>在这种方式的快排过程中，在取首位为基准数时，若首位本身为这个列表的最大值，那么时间复杂度也会随之提高O（n^2），因此，建议可在选择基准数时进行随机选择，尽可能减少该情况的发生。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在排序算法中，有多种排序方式，例如比较低级的：冒泡排序、选择排序、插入排序。还有相对高级一些的排序方式，比如说这次要说的快速排序。快速排序相较于三种低级排序的优势在于其时间复杂度较小O (nlogn)，其利用了递归的思想，相较于循环结构，大大缩减了其排序时间，那么，快速排序</summary>
      
    
    
    
    <category term="排序" scheme="https://runze-li.github.io/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://runze-li.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二分搜索</title>
    <link href="https://runze-li.github.io/2020/10/02/Binary-Search/"/>
    <id>https://runze-li.github.io/2020/10/02/Binary-Search/</id>
    <published>2020-10-02T08:11:53.000Z</published>
    <updated>2020-10-04T08:54:38.102Z</updated>
    
    <content type="html"><![CDATA[<p>计算机算法中有两个大类：搜索、排序。在学习查找算法时，我们首先学习的就是二分搜索，下面就是我对二分搜索的一些理解：<br>二分搜索作为一个基础查找算法，适用于列表中查找数据，其时间复杂度为O(log2n)，但是，该方法有着一个弊端就是需要列表内的数据是按顺序由小到大进行排列的，因此，可参照我的其他文章了解排序算法。<br>二分搜索的原理很简单，对一个有序序列进行搜索，在搜索过程中，先确定左右指针（left，right）每次取中间数（mid）的值与目标值（value）进行比较，若mid值大于目标值（value），则将右指针（right）放与mid指针左边即mid - 1处，反之，若mid值小于目标值（value），则将左指针（left）放与mid指针右边即mid + 1处。最终，若判定到mid指针处的值为目标值（value），则返回此时mid指针位置。</p><p>代码如下：</p><pre><code>def binary_search(Inp_list,val):  #定义二分搜索函数，两个参数为待搜索列表和目标值   left = 0  #左指针初始位置为0   right = len(Inp_list) - 1  #右指针初始位置为最右侧数位置   while right &gt;= left:          mid = (left + right) // 2  #mid指针位置为left与right中间值        if Inp_list[mid] == val:              return mid          else:              if Inp_list[mid] &gt; val:                  right = mid - 1              else:                  left = mid + 1</code></pre><p>在创建列表时，Python不像C语言那样创建数组，Python中的数组是以列表形式呈现，若手动输入数字需使用Python的列表生成式，代码如下。</p><pre><code>list1 = [int(n) for n in input().split()]</code></pre><p>最后可进行测试，不要忘记传入参数。<br>注意：</p><ul><li>1.在Python中，若两数相除取整数位应为‘ // ’，这点与C语言不同。</li><li>2.在Python中是没有指针的，文章中所说只是方便理解，请见谅。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计算机算法中有两个大类：搜索、排序。在学习查找算法时，我们首先学习的就是二分搜索，下面就是我对二分搜索的一些理解：&lt;br&gt;二分搜索作为一个基础查找算法，适用于列表中查找数据，其时间复杂度为O(log2n)，但是，该方法有着一个弊端就是需要列表内的数据是按顺序由小到大进行排列</summary>
      
    
    
    
    <category term="搜索" scheme="https://runze-li.github.io/categories/%E6%90%9C%E7%B4%A2/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="搜索" scheme="https://runze-li.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 三种基本排序代码</title>
    <link href="https://runze-li.github.io/2020/10/01/three-low-sort/"/>
    <id>https://runze-li.github.io/2020/10/01/three-low-sort/</id>
    <published>2020-10-01T08:47:23.000Z</published>
    <updated>2020-10-09T07:28:15.904Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序：</p><pre><code>def bubble_sort(li):   #冒泡排序    for i in range(len(li)-1):          for j in range(len(li)-i-1):              if li[j] &gt; li[j+1]:                  li[j],li[j+1] = li[j+1],li[j]</code></pre><p>选择排序：</p><pre><code>def select_sort(li):    #选择排序    for i in range(len(li)-1):          min_loc = i          for j in range (i+1,len(li)):              if li[j] &lt; li[min_loc]:                  min_loc = j          li[i],li[min_loc] = li[min_loc],li[i]</code></pre><p>插入排序：</p><pre><code>def insert_sort(li):   #插入排序    for i in range(1,len(li)):          tmp = li[i]          j = i - 1          while j &gt;= 0 and li[j] &gt; tmp:              li[j+1] = li[j]              j = j - 1          li[j+1] = tmp</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;冒泡排序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def bubble_sort(li):   #冒泡排序  
  for i in range(len(li)-1):  
        for j in range(len(li)-i-1):  
            if </summary>
      
    
    
    
    <category term="排序" scheme="https://runze-li.github.io/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="Python" scheme="https://runze-li.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://runze-li.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://runze-li.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
